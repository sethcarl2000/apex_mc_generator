//////////////////////////////////////////////////////////////////////////////////////
//  
//  This is a placeholder class meant to be able to store the tracks 
//  in a ROOT file, rather than ASCII output.
//
//  Most data is collected in HRSSteppingAction.cc.
//  
//////////////////////////////////////////////////////////////////////////////////////

#include "TFileHandler.hh"
#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "G4ThreeVector.hh"
//#inlcude "TParameter.h"
#include <memory>

using namespace std; 

//____________________________________________________________________________________
TFileHandler::TFileHandler(const char *const _path, bool is_RHRS, const char *const _treeName)
  : fTrackData(TrackData_t{})
{
  fFile = unique_ptr<TFile>(new TFile(_path,"RECREATE"));
  //fTree = unique_ptr<TTree>(new TTree(_treeName,"Output tree - Q1/vtx data"));
  fTree = new TTree(_treeName,"Output tree - Q1/vtx data");
  fTree->SetMakeClass(1);
  
  //fill out the branches:
  fTree->Branch("event_id",     &fTrackData.event_id); 
  fTree->Branch("track_id",     &fTrackData.track_id);
  fTree->Branch("position_vtx", &fTrackData.position_vtx);
  fTree->Branch("momentum_vtx", &fTrackData.momentum_vtx);
  fTree->Branch("position_Q1",  &fTrackData.position_Q1);
  fTree->Branch("momentum_Q1",  &fTrackData.momentum_Q1);

  fParam_isRHRS = new TParameter<bool>("is_RHRS", is_RHRS);
  fParam_isRHRS->Write(); 
}
//____________________________________________________________________________________
TFileHandler::~TFileHandler()
{
  if (fFile) { if (fFile && fFile->IsOpen()) CloseFile(); }
  //delete fTree;
  //delete fFile; 
}
//____________________________________________________________________________________
void TFileHandler::WriteTrack()
{
  //this class will handle filling of the TTree
  fTree->Fill(); 
  return;
}
//____________________________________________________________________________________
void TFileHandler::CloseFile()
{
  if (fFile && fFile->IsOpen()) {
    if (!fFile->IsZombie()) fTree->Write(); 
    delete fTree; 
    delete fParam_isRHRS; 
    fFile->Close();
  }
}
//____________________________________________________________________________________
void TFileHandler::ClearTrack(bool write_track)
{
  //fTrackData = TrackData_t{}; 
}
//____________________________________________________________________________________
//____________________________________________________________________________________
//____________________________________________________________________________________
//____________________________________________________________________________________
//____________________________________________________________________________________
ClassImp(TFileHandler);
