#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#By Jixie Zhang, 11/11/2008 
#This is the config file for the program menu. This file can be used as an parameter configuration.
#The following feature is included:
#(1) The length of each line should be less than 1024.
#(2) Use ($n ot \n) and ($t or \t) to change line and indent
#(3) Everything after the first # in the line will be ignored,therefore you can place your comment 
#    anywhere.
#(4) Use [branch] or [BRANCH] to start one option branch. Each option can have either required 
#    arguments or optional arguments or both, but no more than 10 arguments in total. Argument
#    types, names and default values should be provided for all allowed arguments.
#(5) There is no limit on the number of branches. The order of the branches is not important.  
#(6) "-h" or "-help" has been hard coded. An usage (help menu) is built automatically using the 
#    description. You can still add you help menu "--h or --help" like the branch id 0 below. Please 
#    note that once the usage menu printed, the program will be terminated. Only 4 arguments will
#    be printed in each line.
#(7) The branch and argument should be input like the following structures and in the exact order.
#    Only the description part can have more than one lines, use character \ at the end of the
#    line to tell that the next line is the continuous part of this one.
#
#typedef struct branch{
#    int     id;              //menu
#    string  key1;
#    string  key2;
#    int     argc_require;   //if less than 0, this branch is not an option, it is just a list of 
#                            //config variables which will not be printed out in help menu
#    size_t  argc_given;     //allow no more than 10 arguments in each branch,
#                            //this number will set the number of arguments of this branch
#    string  typelist[10];   //support [size_t,] int, float, [double,] string only
#    string  namelist[10];   //name list
#    string  valuelist[10];  //value list
#    string  description;    //description of this option, will be printed only if argc_require NOT 
#                            //less than 0. Please use "$t" or "\t" for tab key, "\" at the end of 
#                            //a line to append another line. Use "\n" or "$n" to change lines.
#                            //if key word "description" is missing at the first 15 characters, 
#                            //"$t description:" will be added to the print
#}branch_t;
#
#    In the command line, the input can be: "exe -key1 argc_required argc_optional" or 
#    "exe -key2 argc_required argc_optional".
#    One doesn't need to add a minus sign '-' in front of the keys.
#(8) In the above list, one can use any of these 3 characters( tab key '\t' or space ' ' or comma ',') 
#    to split the members.
#(9) Please note that every branch is optional. Once doesn't have to specify all or any of them. However, 
#    if one specify an option then it have to be in a proper format. If any of the required arguments 
#    are not provided, the help menu will be printed and the program will be ended. If one provides
#    too many arguments, the program will just take what it need and ignore the rest and meanwhile the
#     help menu will also be printed but the program will keep running.
#(10)To create config variables which do not need to be input in the command line, just set argc_require 
#    less than 0. Its description will not be printed in the help menu. Programmer can use these variables
#    in the code as an argument.
#(11)A "switch" type option is the one does not followed by any arguments. For switch type branches, the 
#    argc_require and argc_allow must be zero and the data type must be size_t or int. Once a switch 
#    option is invoked, its value will be set to its inverse. Note that if one place this option twice 
#    then it is equal to not placed at all.
#(12)There is a reserve type option, whose key1 and key2 are not allowed to change. When this option is 
#    placed, the program will invoke some hard coded behavious. There is only one reserve option for now:
#    '-INPUTFILE' or '-inputfile'. its behavious is to read in the $InputFile. All parameters written in
#    this $InpuFile can be achieved by calling
#    UsageManager::GetParameter(string name, T &para);
#Enjoy! 
#########################################################################
[branch]
0            #id
-h           #key1, to support --h
-help        #key2, to support --help
0            #argc_require
0            #argc_allow
int          #type list
PrintHelp    #name list
0            #value list
#if key word "description" is missing at the first 15 characters, "$t description:" will be printed
#in fornt of description message. This is an example.
Print the help message and exit. 
##############################
[branch]
1            #id
o            #key1
out          #key2
1            #argc_require
2            #argc_allow
string       int        #type list
OutFileName  Recreate   #name list
coil.root           1          #value list
$t description: Specify the output file name and create mode. This option will be invoked only if \
$t the length of OutFileName larger than 3. The program will overwrite the exist files if \
$t Recreate is none zero. If Recreate is zero, will automatically add a subrun index and increase this \
$t index to make a new name for the output file. If OutFileName is not provided or shorter than 4, \
$t the program will use 'G2P_G4Sim_nt_$Run_$Subrun.root' with none-overwritten mode.
##############################
[branch]
2            #id
MCIN         #key1
mcin         #key2
2            #argc_require
4            #argc_given
int      string     int      int        #type list
UseMCIN  InFile     TrigNum  SkipNum    #name list
0      Infile.root   0        0         #value list
# this is an example to use \ or \n or $n to separate description into multiple lines
$t description: Use rootfile as input, skip the first SkipNum events then read in TrigNum events. \
$t If TrigNum<=0, the whole input file will be read throught. This command will always be \
$t executed after finishing the mac command inputs $n$t if there is any.
##############################
[branch]
3            #id
m            #key1
mac          #key2
2            #argc_require
10           #argc_given
int      string   string   string   string   string   string   string   string   string   
NofMac   MacFile1 MacFile2 MacFile3 MacFile4 MacFile5 MacFile6 MacFile7 MacFile8 MacFile9 
#1        /lustre/expphy/volatile/halla/parity/saylor/G4MC/macros/beam.mac    2.mac    3.mac    4.mac    5.mac 6.mac 7.mac 8.mac 9.mac
0        /home/Nickie/JLab/HallA/G4MC/macros/beam.mac    2.mac    3.mac    4.mac    5.mac
#this is an example to use $n to split description into lines and use $t to represent tab space
$t description: Use macro command files as input, the 1st argument is the number of files \
$t will be read. One can provide no more than 9 files; \
$t This command will always be executed before reading the MCIN input.
##############################
[branch]
4            #id
x            #key1
gui          #key2
1            #argc_require
1            #argc_allow
int          #type list
UseGui       #namelist
0            #value list
$t description: Enable a gui terminal, require macro file 'gui.mac'. When the UI is QT or XM, \
$t it will try to execute file gui.mac if this option is placed. Make sure you have this file \
$t available at 'current' directory. In case QT is installed, UseGui=1 will launch the default \
$t G4QtUI, UseGui=2 will launch my personal QT window, which is modified from GEMC gui. It allows \
$t to change detector and camera view point, or manupulate the color, the visibility, solid style \
$t or wired style for each logical volumn.  
##############################
[branch]
5            #id
r            #key1
run          #key2
1            #argc_require
1            #argc_allow
int          #type list
RunNumber    #name list
1            #value list
$t description: Use RunNumber as the run number, by default use 1.
##############################
[branch]
6            #id
i            #key1
interactive  #key2
0            #argc_require
0            #argc_allow
int          #type list
InteractiveMode     #name list
0                   #value list
$t description: Use interactive mode, by default it is running in batch mode.\
$t This is an option of switch type. Make sure not repeat typing it.  
##############################
[branch]
7            #id
s            #key1
skim         #key2
1            #argc_require
1            #argc_allow
int          #type list
SkimLevel    #name list
-2           #value list
$t description: Use this SkimLevel to skim track0 tree, but not trackN or D trees. Only events satisfy \
$t track0.TrackClass>=SkimLevel will be stored into the track0 tree. By default it is -2, which means \
$t NO events will be removed. If you want to remove all track0 but keep other trees in the output root\
$t file, you can use this option as '-s 8'. \
$t The definition of track0.TrackClass is the following: \
$t TrackClass is the flag to identify a good track. For all HRS track. the conditions are: \
$t (A) hit virtual boundary; \
$t (B) pow(Thetavb_tr-0.0)/0.055,2.0)+pow(Phivb_tr-0.0)/0.045,2.0)<1.0 \ 
$t (C) dPOverP0 Cut: (P0-Pvb)/P0<0.04 \
$t (D) pow(Thetavb_tr-0.0)/0.051,2.0)+pow(Phivb_tr-0.0)/0.032,2.0)<1.0 && (P0-Pvb)/P0<0.03 \
$t -1 garbage: can not hit the virtual boundary \
$t 0 barely normal: A satisfied  \
$t 1 normal: A, B satisfied \
$t 2 good: A, B, C satisfied \
$t 3 gold: A, B, C, D satisfied \
$t will plus 4 if it can be transported to the focus plane  \
##############################
[branch]
8            #id
b            #key1
beam         #key2
1            #argc_require
4            #argc_allow
float       float         float         float           #type list
BeamEnergy  LHRSMomentum  RHRSMomentum  BeamTiltedAngle #name list
2200          1500         1500         0.0             #value list
$t description: Specify the beam energy and HRS momenta in MeV/c. If HRSMomentum less than 1 keV, \
$t the deltaP will be set to zero. This is helpful to test whether a particle can swing through \
$t the HRS without considering the energy. BeamTiltedAngle is measured at pivot. It will be used \
$t to calculate the effective scattering angle and elastic energy. For G2P, this titled angle will be \
$t 5.7, 3.9 and 0 degrees for 1.159, 1.706 and other beam energies, respectively. Note that one\
$t can also use the following commands during run time: \ 
$t /mydet/beamEnergy , /mydet/leftHRSMomentum \
$t /mydet/rightHRSMomentum, /mydet/beamNtarget \
$t Example:   " -b 1.159 1.157 1.157 5.7" or " -b 1.706 1.703 1.703 3.9"
##############################
[branch]
9            #id
g            #key1
engine       #key2
1            #argc_require
8            #argc_allow
string         string         string         string         string         string         string         string         #type list
PrimaryEngine1 PrimaryEngine2 PrimaryEngine3 PrimaryEngine4 PrimaryEngine5 PrimaryEngine6 PrimaryEngine7 PrimaryEngine8 #name list
Uniform  Uniform  Uniform  Uniform  Uniform  Uniform  Uniform  Uniform  Uniform    #value list
$t description: Specify the primary engine type. Candidates are: Uniform, HRSElasEl, HRSElasNucleus,\
$t HRSQuasiElasEl, HRSQuasiElasNucleon, BonusProton, FastProton, RootHisto, RootNtuple, H90UserFit, \
$t Compton and BdL. \
st For Elastic and QuasiElastic engines, only Theta, Phi angle inputs will be used to throw \
$t theta and phi angle, then combine with beam energy and target mass to determine Ptot. \
$t For compton engine, a random Ei will be generated based on bremsstrahlund photon spectrum, \
$t then this Ei will be used with Theta_gamma to calculate E_gamma. Note that this Compton engine \
$t always assume the target is proton. One can shoot more than one particle with Compton engine. \
##############################
[branch]
10           #id
t            #key1
target       #key2
2            #argc_require
3            #argc_allow
float        float               float                      #type list
TargetMass   TargetAtomicNumber  TargetNeutronNumber        #name list
#11.178       6                   6                          #value list
0.9383       1                   0                          #value list
$t description: Specify the target mass in GeV and the atomic number. These number will only be used \
$t to calculated elastic cross section in Elas engine. It will not be used to change the target \
$t material. One can also use these run time command to change these paramenters: \
$t /mydet/targetMass,  /mydet/targetAtomicNumber, /mydet/beamNtarget  \
$t Example:   " -t 11.178 6 6" or " -t 2.808 2 1" or " -t 3.726 2 2"
##############################
[branch]
11          #id
INPUTFILE   #key1
inputfile   #key2
1           #argc_require
1           #argc_allow
string      #type list
InputFile   #name list
Detector.ini    #value list
#This is a reserve option, which means that the keys are not allowed to change
$t description: This is a reserve option, When this argument is given the 'InputFile' will be  \
$t read in. All parameters wirtten in this configuration file can be achieved by calling \
$t UsageManager::GetParameter(string name, T &para);
##############################
#this is a branch that contain the config variabls which no need to be input by user
#set argc_require less than 0, then the description will not be printed 
[branch]
99           #id
nokey        #key1
nokey        #key2
-1           #argc_require
5            #argc_allow
size_t  int   string  double  float   #type list
OptA    OptB  OptC    OptD    optF    #name list
-2      0   "empty"  1.234    5.43    #value list
$t description: This is an example to config variables which do not need to be typed in the cmd line.
##############################
[branch]
12           #id
MCIN1        #key1
mcin1        #key2
2            #argc_require
4            #argc_given
string           string           int      int        #type list
InRootFileName1  InRootTreeName1  TrigNum1 SkipNum1   #name list
InRootFile0.root track0           0        0          #value list
# this is an example to use \ or \n or $n to separate description into multiple lines
$t description: Specify the input file for particle2. Need to couple with -engine option. \
$t This option will work only if the engine for particle1 is the following: RootHisto, RootNtuple. \
$t InRootFileName and InRootTreeName give the filename and tree name. The first SkipNum \
$t events will be skipped then TrigNum events will be read in. If TrigNum<=0, the whole\
$t input file will be read throught. This command will always be executed after finishing\
$t the '-mac' or '-m' command inputs if there is any.
##############################
[branch]
13           #id
MCIN2        #key1
mcin2        #key2
2            #argc_require
4            #argc_given
string           string          int      int        #type list
InRootFileName2  InRootTreeName2 TrigNum2 SkipNum2   #name list
InRootFile1.root track1          0        0          #value list
# this is an example to use \ or \n or $n to separate description into multiple lines
$t description: Specify the input file for particle2. Need to couple with -engine option. \
$t This option will work only if the engine for particle1 is the following: RootHisto, RootNtuple. \
$t InRootFileName and InRootTreeName give the filename and tree name. The first SkipNum \
$t events will be skipped then TrigNum events will be read in. If TrigNum<=0, the whole\
$t input file will be read throught. This command will always be $n
$t executed after finishing the mac command inputs if there is any.
##############################
[branch]
14           #id
MCIN3        #key1
mcin3        #key2
2            #argc_require
4            #argc_given
string           string           int      int        #type list
InRootFileName3  InRootTreeName3  TrigNum3 SkipNum3   #name list
InRootFile2.root track2           0        0          #value list
# this is an example to use \ or \n or $n to separate description into multiple lines
$t description: Specify the input file for particle3. Need to couple with -engine option. \
$t This option will work only if the engine for particle3 is the following: RootHisto, RootNtuple. \
$t InRootFileName and InRootTreeName give the filename and tree name. The first SkipNum \
$t events will be skipped then TrigNum events will be read in. If TrigNum<=0, the whole\
$t input file will be read throught. This command will always be $n
$t executed after finishing the mac command inputs if there is any.
##############################
[branch]
15           #id
MCIN4        #key1
mcin4        #key2
2            #argc_require
4            #argc_given
string           string           int      int        #type list
InRootFileName4  InRootTreeName4  TrigNum4 SkipNum4   #name list
InRootFile3.root track3           0        0          #value list
# this is an example to use \ or \n or $n to separate description into multiple lines
$t description: Specify the input file for particle4. Need to couple with -engine option. \
$t This option will work only if the engine for particle4 is the following: RootHisto, RootNtuple. \
$t InRootFileName and InRootTreeName give the filename and tree name. The first SkipNum \
$t events will be skipped then TrigNum events will be read in. If TrigNum<=0, the whole\
$t input file will be read throught. This command will always be $n
$t executed after finishing the mac command inputs if there is any.
##############################
[branch]
16           #id
MCIN5        #key1
mcin5        #key2
2            #argc_require
4            #argc_given
string           string           int      int        #type list
InRootFileName5  InRootTreeName5  TrigNum5 SkipNum5   #name list
InRootFile4.root track4           0        0          #value list
# this is an example to use \ or \n or $n to separate description into multiple lines
$t description: Specify the input file for particle5. Need to couple with -engine option. \
$t This option will work only if the engine for particle5 is the following: RootHisto, RootNtuple. \
$t InRootFileName and InRootTreeName give the filename and tree name. The first SkipNum \
$t events will be skipped then TrigNum events will be read in. If TrigNum<=0, the whole\
$t input file will be read throught. This command will always be $n
$t executed after finishing the mac command inputs if there is any.
##############################
[branch]
17           #id
GENHISTO     #key1
genhisto     #key2
0            #argc_require
0            #argc_given
int          #type list
GenHistoOnly #name list
0            #value list
$t description: A switch to tell the program only to create root histo file.  During the run\
$t only config tree and histo will be filled, trackN tree will be ignored. The output root\
$t file can be used by setting the particle engine to  "RootHisto". \
$t For example (to use histo in root file  OutHisto.root):   "-g RootHisto -mcin1 OutHisto.root histo" 
##############################
[branch]
18              #id
PHYSICSMODEL    #key1
physicsmodel    #key2
1               #argc_require
6               #argc_given
string        int            float            float                 float      float        #type list
PhysicsModel  UseJixieModel  TargetStepLimit  ScatChamberStepLimit  BStepLimit FZBStepLimit #name list
QGSP_BERT     1              5                 5                     5          10          #value list
$t description: Choose one physics list from the following (default is QGSP_BERT): \
$t FTFP_BERT FTFP_BERT_EMV FTFP_BERT_EMX FTF_BIC \
$t LHEP LHEP_EMV QBBC QGS_BIC QGSC_BERT  \
$t QGSP QGSP_BERT QGSP_BERT_EMV QGSP_BIC_EMY \
$t QGSP_BERT_EMX QGSP_BERT_HP QGSP_BIC QGSP_BIC_HP \
$t For detials of these model, please refer to \
$t http://geant4.cern.ch/support/proc_mod_catalog/physics_lists/referencePL.shtml \
$t If "UseJixieModel" is not equal to 0, one can choose the following model: \
$t QGSP_BERT QGSP_BERT_HP QGSP_BIC QGSP_BIC_HP \
$t If "PhysicsModel" is not from the above, the hadron model of Jixie ("HRSHadronPhysics") \
$t will be used. In the model of Jixie, user step limit will be invoked for e-, pr, alpha, \
$t D2 and He3. TargetStepLimit will be used in target nose logical, ScatChamberStepLimit will \
$t will be used within scattering chamber, BStepLimit will be used within the magnetic logical \
$t and FZBStepLimit will be used within FZ magnets. All of them are in unit of mm.
##############################
[branch]
19           #id
ThirdArm     #key1
thirdarm     #key2
2            #argc_require
3            #argc_allow
float      float      float               #type list
TAHoffset  TAVoffset  TAShieldThick       #name list
-9999      -9999      0                   #value list
$t description: Specify the 3rd arm center position and its aluminum shielding thickness. \
$t if both TAHoffset and TAVoffset are equal to -9999, the default positions and thickness\
$t will be used. The default values are the following:  \
$t for E=1.159, pTAHoffset=60, pTAVoffset=0,   TAShieldThick=0 \
$t for E=1.706, pTAHoffset=0,  pTAVoffset=70,  TAShieldThick=2 \
$t for E=2.257, pTAHoffset=0,  pTAVoffset=-40, TAShieldThick=2 
##############################
[branch]
20           #id
FAST         #key1
fast         #key2
0            #argc_require
4            #argc_allow
int          int                 int             int              #type list
NoSecondary  NoDetectorResponse  StoreSecondary  StoreTrajectory  #name list
1            0                   0               0                #value list
$t description: This option is supposed to turn off some functions such that it can run faster.\
$t When NoSecondary==1, no secondary particles will be tracked, only the primaries will be \
$t simulated and written into the output. If NoDetectorResponse=1, the detector response will be \
$t ignored. StoreSecondary is used to tell whether to store the secondary tracks information (only \
$t at their initial step) into the detector tree. It has 3 candidates: 0, 1, and 2. \
$t StoreSecondary==0 means do not store, 1 means store all secondaries, 2 means store only those \
$t tracks that fired the sensitive detectors and their parent tracks. Note that the primary tracks \
$t information at their first step will always be store. When  StoreTrajectory==1, the whole\
$t trajectory for each particle (primaries + secondaries) will be  stored into the tree, \
$t consequently increasing the size of the tree very rapidly. Please use this option carefully. \
$t Turn it on only if you really have to. A lot of computational cycles can be  saved at the \
$t EndOfEvent actions by setting StoreSecondary to 0. Note that primary tracks will always \
$t be stored into the detector tree. In addition, one can still change "NoSecondary" using command \
$t "/tracking/noSecondary 1|0" in run time. Other than this option, disable the verbose output \
$t will always be the best way to run this program fast. Use "-XS " option to disable XS calculation \
$t can also gain some speed. \
$t example: "-fast 1 1 0 0" will give you most fast speed, but not detector response at all. \
$t          "-fast 1 0 0 0" will give you all primary initial step information you need. \
$t          "-fast 1 0 0 1" will give you all primary trajectory you need. \
$t          "-fast 0 0 2 0" will give you most initial step information you need. \
$t          "-fast 0 0 2 1" will give you most interested trajectories you need. \
$t          "-fast 0 0 1 1" will give you all trajectories and most of them you do not need. 
##############################
[branch]
21                   #id
UseSeptumPlusStdHRS  #key1
USESEPTUMPLUSSTDHRS  #key2
0                    #argc_require
0                    #argc_given
int                  #type list
UseSeptumPlusStdHRS  #name list
0                    #value list
$t description: A switch to tell the program to place HRS virtual boundary at the Q1 entrance plane \
$t and use septum field plus the standard HRS to propogate HRS particles. This will be valid only if \
$t the septum field is effectively used. Note that one can config "BField_Septum.ini" to set up the \
$t septum field.  
##############################
[branch]
22                   #id
VB                   #key1
VirtualBoundary      #key2
1                    #argc_require
9                    #argc_given
int                  float float  float    int       float      float  float  float  #type list
SetupVirtualBoundary VBRin VBRout VBHeight VBRotAxis VBRotAngle VBPosX VBPosY VBPosZ #name list
0                    537   540    2000     1         90         0      0      0      #value list
$t description: A switch to tell the program to place the virtual boundary. For G2P|GEP experiment, \
$t the virtual boundary is a cylinder made of air. One can specify the solid dimention, rotation and center \
$t position. Note that VBRotAxis can be 0(NO rotation) or 1 (X), 2(Y) and 3(Z) axis. Only one \
$t rotation is supported. The units used here are mm, deg. Center position VBPosX, VBPosY and VBPosZ \
$t are relative to the pivot, not the center of the target in G2P|GEP.
##############################
[branch]
23                   #id
FZB1                 #key1
ChicaneMagnet1       #key2
1                    #argc_require
8                    #argc_given
int            float           float   float   float  float    float    float     #type list
UseDefaultFZB1 FZB1TiltedAngle FZB1Bx  FZB1By  FZB1Bz FZB1PosX FZB1PosY FZB1PosZ  #name list
1              -1.146          0.1970  0.0     0.0    0.0      -72.2    -7036.2   #value list
$t description: Specify the chicane magnet FZB1. I have the default settings hard coded. It will use \
$t this input only if UseDefaultFZB1=0. Currently this magnet can only be rotated about X axis by \
$t FZB2TiltedAngle clockwisely (overlook). One can also sipecify the center position vector and the  \
$t uniform field vector. In G2P|GEP, FZB1 is fixed at a position, no ratation or vertical movememt, \
$t only FZB1Bx is changed. The units used here are mm, deg and tesla. NOTE that the position is \
$t with respected to the center of the hall. The details of the default setting are: \
$t x=0, z=-7035.8, By=0, Bz=0, TiltedAngle=-1.146*deg; y and Bx will change as the following: \
$t //For g2p transverse field \
$t //    pFZB1PosY    = -7.26*cm*1.159/pBeamEnergy*pHelm_CurrentRatio/0.5+mPivotYOffset;\
$t //    pFZB1Bx      = 0.302*tesla*pHelm_CurrentRatio/0.5;\
$t //for gep, 6 deg field    \
$t //    pFZB1PosY    = -7.26*cm*1.159/pBeamEnergy*pHelm_CurrentRatio/1.0+mPivotYOffset;\
$t //    pFZB1Bx      = 0.036*tesla*pHelm_CurrentRatio/1.0; \
$t Default setting is only good for settings that septum is in. 
##############################
[branch]
24                   #id
FZB2                 #key1
ChicaneMagnet2       #key2
1                    #argc_require
8                    #argc_given
int            float           float   float   float  float    float    float     #type list
UseDefaultFZB2 FZB2TiltedAngle FZB2Bx  FZB2By  FZB2Bz FZB2PosX FZB2PosY FZB2PosZ  #name list
1              1.600           -0.3950 0.0     0.0    0.0      -340.0   -3783.2   #value list
$t description: Specify the chicane magnet FZB2. I have the default settings hard coded. It will use \
$t this input only if UseDefaultFZB2=0. Currently this magnet can only be rotated about X axis by \
$t FZB2TiltedAngle clockwisely (overlook). One can also sipecify the center position vector and the  \
$t uniform field vector, although only FZB2PosY and FZB2Bx are needed for G2P|GEP. The units used \
$t here are mm, deg and tesla. NOTE that the position is with respected to the center of the hall. \
$t The details of the default setting are: \
$t x=0, z=-3783.2, By=0, Bz=0, TiltedAngle=1.600*deg;  y and Bx will change as the following: \
$t //For g2p transverse field \
$t //    pFZB2PosY    = -43.63*cm*1.159/pBeamEnergy*pHelm_CurrentRatio/0.5+5*cm+mPivotYOffset;\
$t //    pFZB2Bx      = 0.702*tesla*pHelm_CurrentRatio/0.5;\
$t //for gep, 6 deg field    \
$t //    pFZB2PosY    = -7.36*cm*1.159/pBeamEnergy*pHelm_CurrentRatio/0.5+mPivotYOffset;\
$t //    pFZB2Bx      = 0.085*tesla*pHelm_CurrentRatio/0.5; \
$t Default setting is only good for settings thatthat septum is in.  
##############################
[branch]
25                   #id
XS                   #key1
CalculateXS          #key2
0                    #argc_require
1                    #argc_given
int                  #type list
CalculateXS          #name list
1                    #value list
#this is a switch type option
$t description: A switch to specify whether or not to calculate the cross section. If CalculateXS==1, \
$t elastic XS will be calculated. If CalculateXS==2, inelastic XS will be calculated using QElXS lib. \
$t If CalculateXS==3, both XS will be calculated. The result will be stored at the track tree. \
$t If CalculateXS==0, no XS will be calculated, which can save a lot of CPU cycles. The elastic XS is \
$t calculated based on the target given in the command line option '-t', while the inelastic XS is \
$t based on the material at vertex. Sometimes QElXS might take several minutes to perform one \
$t calculation. Please use this switch wisely.  
##############################
[branch]
26                   #id
targetfield          #key1 
TargetField          #key2 
1                    #argc_require
2                    #argc_allow
string             string                  #type list
TargetFieldIni     TargetFieldMap          #name list
BField_Helm.ini    uni_hallbfield.dat      #value list
$t description: Specify the target field configuration file and its map file. One can put the full path \
$t or relative path of them here. This field map will be read by class BField_Helm, which takes only RZ \
$t map in format of (z, r, Bz, Br, Btot) (cm and tesla) and must have both z and azimuthial symmetry. \
$t In HRSMC, both SANE and Hall B target field map are available. The SANE map is g2p_targetfield_SANE.dat\
$t For G2p|Gep experiment, that target field could have 0, 6 and 90 degrees rotation and \
$t with differenet field value. One should prepare a configuration file for each setting.\
##############################
[branch]
27                   #id
septumfield          #key1 
SeptumField          #key2 
1                    #argc_require
2                    #argc_allow
string             string                  #type list
SeptumFieldIni     SeptumFieldMap          #name list
BField_Septum.ini  PREX_juliette.dat     #value list
$t description: Specify the septum field configuration file and its map file. One can put the full path \
$t or relative path of them here. This field map will be read by class BField_Septum, which takes only \
$t TOSCA map in format of (x, y, z, Bx, By, Bz) and must have Z symmetry. In HRSMC, there \
$t will be 4 versions of septum field: \
$t 1) normal septum 484816, g2p_septumfield.dat: used in commissioning run in December 2011\
$t 2) normal septum 484816 + shim, g2p_septumfield_484816_950A.dat: used between March 2nd and March 17th \
$t 3) septum 403116 + shim, g2p_septumfield_403216_950A.dat: used between March 18th and April 9th \
$t 4) septum 400016 + shim, g2p_septumfield_400016_950A.dat; used after April 10th \
##############################
[branch]
28                   #id
recon                #key1 
Reconstruction       #key2 
1                    #argc_require
4                    #argc_allow
int                int         float      float             #type list
WhereToStopRecon   SnakeModel  BPMYRes    BPMXRes           #name list
0                  49          1.0        0.5               #value list
$t description: Specify where to stop reconstruction and the BPM resolution in lab X and Lab Y. \
$t WhereToStopRecon equal to 0 means stop reconstruction at target plane, 1 means at vertex plane and \
$t 2 means at exact thrown vertex z. \
$t SnakeModel is used to identify which SNAKE packages will be use, SnakeModel between 10 and 19 are \
$t for g2p|gep, 20 for E97110 GDH experiment...  Here is a list of SnakeModel candidates: \
$t SnakeModel=10: g2p septum No shim, 5.65 deg, by John, 2 cm raster, Wrong Bx septum field \
$t SnakeModel=11: g2p septum 484816+shim, 5.65 deg, 3cm raster, by Min \
$t SnakeModel=12: g2p septum 403216+shim, 5.65 deg, SNAKE Model not ready yet \
$t SnakeModel=13: g2p septum 400016+shim, 5.65 deg, SNAKE Model not ready yet \
$t SnakeModel=19: g2p septum 484816+shim, 5.65 deg, by Min, 2 cm raster, Wrong Bx septum field \
$t SnakeModel=20: GDH exp with large X0 version \
$t SnakeModel=other_values: Standard HRS setting, no septum field, no target field \
$t BPMXRes is the Lab X resolution of the BPM, and BPMYRes is for Lab Y, which is beam energy and \
$t target field dependent. The Y resolution contributed from 2.5T target field, where beam goes to\
$t the Hall a dump, are 0.7, 0.9 and 1.4 mm for 2.254, 1.706 and 1.159 GeV Beam, respectively.\
$t Assuming the N15 BPM system itself has about 0.5 mm uncertainty, the combined BPM Y resolution \
$t will be 0.9, 1.0 and 1.5 mm for 2.254, 1.706 and 1.159 GeV Beam. \
##############################
[branch]
29                   #id
UseOpticsDB          #key1 
DB                   #key2 
1                    #argc_require
3                    #argc_allow
int             string           string             #type list
UseOpticsDB     HRSOpticsDBL     HRSOpticsDBR       #name list
1               db_L.vdc.dat     db_R.vdc.dat       #value list
$t description: Specify whether to use the analyzer DB to do reconstruction and the path of the. \
$t database files. UseOpticsDB equal to 1 means use analyzer DB to do reconstruction. \
$t HRSOpticsDBL and HRSOpticsDBR are 2 database files for left arm and right arm. \
$t They should be in the normal analyzer database format. \
##############################